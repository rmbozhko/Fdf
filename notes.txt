void	bresenheim_algorithm_ints(t_pnt *pnt1, t_pnt *pnt2, t_env *e)
{
	t_pnt		temp;
	int 		dx;
	int 		dy;
	int 		k;
	int 	 	t;

	temp = *pnt1;
	dx = (pnt2->x - temp.x);
	dy = (pnt2->y - temp.y);
	t = (-(0.5) * (2*dx));
	k = (2*dy); 
	while (temp.y != pnt2->y && temp.x != pnt2->x)
	{
		mlx_pixel_put(e->mlx_ptr, e->win_ptr, temp.x, temp.y, temp.color);
		t += k;
		if (t < 0)
			temp.x += 1;
		else if (t >= 0)
		{
			temp.x += 1;
			temp.y += 1;
			t -= (2*dx) ;
		}
	}
}